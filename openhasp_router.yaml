automation:
  - id: panel_event_router
    alias: Panel MQTT -> HA actions (Home + Studio)
    mode: queued
    trigger:
      - platform: mqtt
        topic: hasp/+/state/#       # wildcard node name
    variables:
      hasp_node: "plate"
      # which node sent this?
      node: "{{ trigger.topic.split('/')[1] }}"
      # ---- map UI control IDs to HA entities ----
      relays_map:
        p1b101: switch.larry
        p1b111: switch.moe
        p1b121: switch.curly
      lights_map:
        p2b32: light.studio_upper
        p2b42: light.studio_lower
      color_map:
        p2b34: { entity: light.studio_upper, rgb: [255, 0, 0] }
        p2b35: { entity: light.studio_upper, rgb: [0, 255, 0] }
        p2b36: { entity: light.studio_upper, rgb: [0, 0, 255] }
        p2b37: { entity: light.studio_upper, kelvin: 3000 }
        p2b44: { entity: light.studio_lower, rgb: [255, 0, 0] }
        p2b45: { entity: light.studio_lower, rgb: [0, 255, 0] }
        p2b46: { entity: light.studio_lower, rgb: [0, 0, 255] }
        p2b47: { entity: light.studio_lower, kelvin: 3000 }
        
              # Patio toggles
      patio_map:
        p3b12: light.patio_lights
        p3b22: light.string_lights
        p3b32: light.patio_fans
        p3b42: switch.mist_outlet

      # Shade controls
      shade_entity: cover.shade
      shade_matrix_id: p3m52

      ceiling_btn_id: p2b12
      ceiling_entity: light.studio_lights
      fan_btn_id: p2m22
      fan_entity: fan.levds_fanspd_6e49
      fan_steps: { 0: 0, 1: 50, 2: 75, 3: 100 }
      id: "{{ trigger.topic.split('/')[-1] }}"
      event: "{{ trigger.payload_json.event|default('') }}"
      val: "{{ trigger.payload_json.val|default(-1)|int }}"
    # only act on the chosen node
    condition: "{{ node == hasp_node }}"
    action:
      - choose:
          # Title bar follows current page
          - conditions: "{{ trigger.topic.endswith('/state/page') }}"
            sequence:
              - variables:
                  title: >-
                    {% set p = trigger.payload|string %}
                    {% if p == '1' %}Home{% elif p == '2' %}Dance Studio{% elif p == '3' %}Patio{% else %}Page {{p}}{% endif %}
              - service: mqtt.publish
                data:
                  topic: hasp/{{ hasp_node }}/command/p0b2.text
                  payload: "{{ title }}"

          # Home relays (Larry/Moe/Curly)
          - conditions: "{{ id in relays_map and event == 'up' }}"
            sequence:
              - choose:
                  - conditions: "{{ val == 1 }}"
                    sequence:
                      - service: switch.turn_on
                        target: { entity_id: "{{ relays_map[id] }}" }
                default:
                  - service: switch.turn_off
                    target: { entity_id: "{{ relays_map[id] }}" }

          # Studio circles -> toggle the mapped light
          - conditions: "{{ id in lights_map and event == 'up' }}"
            sequence:
              - choose:
                  - conditions: "{{ is_state(lights_map[id], 'off') }}"
                    sequence:
                      - service: light.turn_on
                        target: { entity_id: "{{ lights_map[id] }}" }
                default:
                  - service: light.turn_off
                    target: { entity_id: "{{ lights_map[id] }}" }

          # Studio color chips -> set color + turn on
          - conditions: "{{ id in color_map and event == 'up' }}"
            sequence:
              - service: light.turn_on
                target: { entity_id: "{{ color_map[id].entity }}" }
                data: >
                  {% set cfg = color_map[id] %}
                  {% if cfg.rgb is defined %}
                  {"rgb_color": {{ cfg.rgb }}}
                  {% else %}
                  {"kelvin": {{ cfg.kelvin }}}
                  {% endif %}

          # Ceiling lights toggle (btn val is the NEW state)
          - conditions: "{{ id == ceiling_btn_id and event == 'up' }}"
            sequence:
              - choose:
                  - conditions: "{{ val == 1 }}"
                    sequence:
                      - service: light.turn_on
                        target: { entity_id: "{{ ceiling_entity }}" }
                default:
                  - service: light.turn_off
                    target: { entity_id: "{{ ceiling_entity }}" }

          # Fan speed (btnmatrix index -> percentage)
          - conditions: "{{ id == fan_btn_id and event in ['changed','up'] }}"
            sequence:
              - choose:
                  - conditions: "{{ fan_steps[val] == 0 }}"
                    sequence:
                      - service: fan.turn_off
                        target: { entity_id: "{{ fan_entity }}" }
                default:
                  - service: fan.set_percentage
                    target: { entity_id: "{{ fan_entity }}" }
                    data:
                      percentage: "{{ fan_steps[val] }}"
                                # Patio toggles (lights/fans/mist)
          - conditions: "{{ id in patio_map and event == 'up' }}"
            sequence:
              - choose:
                  - conditions: "{{ val == 1 }}"
                    sequence:
                      - service: homeassistant.turn_on
                        target: { entity_id: "{{ patio_map[id] }}" }
                default:
                  - service: homeassistant.turn_off
                    target: { entity_id: "{{ patio_map[id] }}" }

          # Shade matrix actions
          - conditions: "{{ id == shade_matrix_id and event in ['up','changed'] }}"
            sequence:
              - choose:
                  - conditions: "{{ val == 0 }}"
                    sequence:
                      - service: cover.open_cover
                        target: { entity_id: cover.shade }
                  - conditions: "{{ val == 1 }}"
                    sequence:
                      - service: cover.stop_cover
                        target: { entity_id: cover.shade }
                  - conditions: "{{ val == 2 }}"
                    sequence:
                      - service: cover.close_cover
                        target: { entity_id: cover.shade }
