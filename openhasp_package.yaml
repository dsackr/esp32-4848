input_select:
  hasp_theme:
    name: openHASP Theme
    options:
      - dark
      - light
    initial: dark
  hasp_slot1_type: { name: openHASP Slot 1 Type, options: [switch, light, fan], initial: switch }
  hasp_slot2_type: { name: openHASP Slot 2 Type, options: [switch, light, fan], initial: switch }
  hasp_slot3_type: { name: openHASP Slot 3 Type, options: [switch, light, fan], initial: switch }
  hasp_slot4_type: { name: openHASP Slot 4 Type, options: [switch, light, fan], initial: light }
  hasp_slot5_type: { name: openHASP Slot 5 Type, options: [switch, light, fan], initial: light }
  hasp_slot6_type: { name: openHASP Slot 6 Type, options: [switch, light, fan], initial: fan }

input_boolean:
  hasp_use_ui_layout:
    name: openHASP Use UI Layout
    initial: false
  hasp_slot1_enabled: { name: openHASP Slot 1 Enabled, initial: true }
  hasp_slot2_enabled: { name: openHASP Slot 2 Enabled, initial: true }
  hasp_slot3_enabled: { name: openHASP Slot 3 Enabled, initial: true }
  hasp_slot4_enabled: { name: openHASP Slot 4 Enabled, initial: false }
  hasp_slot5_enabled: { name: openHASP Slot 5 Enabled, initial: false }
  hasp_slot6_enabled: { name: openHASP Slot 6 Enabled, initial: false }

input_text:
  hasp_node:
    name: openHASP Node
    initial: plate
    max: 32
  hasp_slot1_entity: { name: openHASP Slot 1 Entity, max: 128 }
  hasp_slot2_entity: { name: openHASP Slot 2 Entity, max: 128 }
  hasp_slot3_entity: { name: openHASP Slot 3 Entity, max: 128 }
  hasp_slot4_entity: { name: openHASP Slot 4 Entity, max: 128 }
  hasp_slot5_entity: { name: openHASP Slot 5 Entity, max: 128 }
  hasp_slot6_entity: { name: openHASP Slot 6 Entity, max: 128 }
  hasp_slot1_label:  { name: openHASP Slot 1 Label,  max: 64 }
  hasp_slot2_label:  { name: openHASP Slot 2 Label,  max: 64 }
  hasp_slot3_label:  { name: openHASP Slot 3 Label,  max: 64 }
  hasp_slot4_label:  { name: openHASP Slot 4 Label,  max: 64 }
  hasp_slot5_label:  { name: openHASP Slot 5 Label,  max: 64 }
  hasp_slot6_label:  { name: openHASP Slot 6 Label,  max: 64 }

input_number:
  hasp_slot1_page: { name: openHASP Slot 1 Page, min: 1, max: 9, step: 1, mode: box, initial: 1 }
  hasp_slot2_page: { name: openHASP Slot 2 Page, min: 1, max: 9, step: 1, mode: box, initial: 1 }
  hasp_slot3_page: { name: openHASP Slot 3 Page, min: 1, max: 9, step: 1, mode: box, initial: 1 }
  hasp_slot4_page: { name: openHASP Slot 4 Page, min: 1, max: 9, step: 1, mode: box, initial: 1 }
  hasp_slot5_page: { name: openHASP Slot 5 Page, min: 1, max: 9, step: 1, mode: box, initial: 1 }
  hasp_slot6_page: { name: openHASP Slot 6 Page, min: 1, max: 9, step: 1, mode: box, initial: 2 }

script:
  panel_build_dynamic_ui:
    alias: Panel â€“ Build Dynamic UI (configurable)
    mode: single
    sequence:
      # --- Theme + Node from MQTT-configured entities ---
      - variables:
          hasp_node: "{{ states('text.dash480_node') | default('plate') }}"
          theme: "{{ states('select.dash480_theme') | default('dark') }}"
          pages_count: "{{ [1,(states('number.dash480_pages')|int(1)),6] | sort | nth(1) }}"
          # Dark palette (defaults)
          color_bg: "{{ '#111827' if theme == 'dark' else '#F3F4F6' }}"
          color_text: "{{ '#E5E7EB' if theme == 'dark' else '#111827' }}"
          color_muted: "{{ '#9CA3AF' if theme == 'dark' else '#4B5563' }}"
          color_tile: "{{ '#0B1220' if theme == 'dark' else '#FFFFFF' }}"
          color_btn_bg: "{{ '#1E293B' if theme == 'dark' else '#E5E7EB' }}"
          color_btn_text: "{{ '#FFFFFF' if theme == 'dark' else '#111827' }}"

      # --- Devices configuration from MQTT device controls ---
      - variables:
          devices: >-
            {% set ns = namespace(list=[]) %}
            {% for p in range(1, (pages_count|int)+1) %}
              {% for s in range(1,7) %}
                {% set ent = states('text.dash480_p' ~ p ~ '_s' ~ s) %}
                {% if ent not in ['', 'unknown', 'unavailable', none] %}
                  {% set dtype = ent.split('.')[0] %}
                  {% if dtype in ['switch','light','fan'] %}
                    {% set lbl = state_attr(ent, 'friendly_name') | default(ent) %}
                    {% set ns.list = ns.list + [ { 'page': p, 'type': dtype, 'entity': ent, 'label': lbl } ] %}
                  {% endif %}
                {% endif %}
              {% endfor %}
            {% endfor %}
            {% if (ns.list | count) == 0 %}
              {{ [
                { 'page': 1, 'type': 'switch', 'entity': 'switch.dash480_relay1', 'label': 'Relay 1' },
                { 'page': 1, 'type': 'switch', 'entity': 'switch.dash480_relay2', 'label': 'Relay 2' },
                { 'page': 1, 'type': 'switch', 'entity': 'switch.dash480_relay3', 'label': 'Relay 3' }
              ] }}
            {% else %}
              {{ ns.list }}
            {% endif %}

      # Clear device before building
      - service: mqtt.publish
        data:
          topic: "hasp/{{ hasp_node }}/command/clearpage"
          payload: "all"

  hasp_publish_discovery:
    alias: HASP MQTT discovery (3 relays)
    mode: single
    fields:
      node:
        description: HASP node name (device name)
        example: dash
      relay1_name:
        description: Friendly name for relay 1
        default: "Relay 1"
      relay2_name:
        description: Friendly name for relay 2
        default: "Relay 2"
      relay3_name:
        description: Friendly name for relay 3
        default: "Relay 3"
    sequence:
      - variables:
          # Use current states if present; otherwise defaults
          node_state: "{{ states('text.dash480_node') if states('text.dash480_node') not in ['', 'unknown', 'unavailable', none] else 'plate' }}"
          theme_state: "{{ states('select.dash480_theme') if states('select.dash480_theme') not in ['', 'unknown', 'unavailable', none] else 'dark' }}"
          pages_state: "{{ states('number.dash480_pages') if states('number.dash480_pages') not in ['', 'unknown', 'unavailable', none] else 1 }}"
          base: "hasp/{{ node_state }}"
          dev_ident: "dash480_device"
          device: >
            {{ {
              'identifiers': [dev_ident],
              'name': 'Dash480',
              'manufacturer': 'openHASP',
              'model': 'ESP32-S3 480x480'
            } | tojson }}
      # Relay 1/2/3 switches (unique_id is stable; topics update with node)
      - service: mqtt.publish
        data:
          topic: "homeassistant/switch/dash480_relay1/config"
          retain: true
          payload: >
            {
              "name": "Relay 1",
              "object_id": "dash480_relay1",
              "unique_id": "dash480_relay1",
              "command_topic": "{{ base }}/command/output1",
              "state_topic":   "{{ base }}/state/output1",
              "value_template": "{{'{{ value_json.state }}'}}",
              "payload_on":  "{\"state\":\"on\"}",
              "payload_off": "{\"state\":\"off\"}",
              "optimistic": true,
              "device": {{ device }}
            }
      - service: mqtt.publish
        data:
          topic: "homeassistant/switch/dash480_relay2/config"
          retain: true
          payload: >
            {
              "name": "Relay 2",
              "object_id": "dash480_relay2",
              "unique_id": "dash480_relay2",
              "command_topic": "{{ base }}/command/output2",
              "state_topic":   "{{ base }}/state/output2",
              "value_template": "{{'{{ value_json.state }}'}}",
              "payload_on":  "{\"state\":\"on\"}",
              "payload_off": "{\"state\":\"off\"}",
              "optimistic": true,
              "device": {{ device }}
            }
      - service: mqtt.publish
        data:
          topic: "homeassistant/switch/dash480_relay3/config"
          retain: true
          payload: >
            {
              "name": "Relay 3",
              "object_id": "dash480_relay3",
              "unique_id": "dash480_relay3",
              "command_topic": "{{ base }}/command/output40",
              "state_topic":   "{{ base }}/state/output40",
              "value_template": "{{'{{ value_json.state }}'}}",
              "payload_on":  "{\"state\":\"on\"}",
              "payload_off": "{\"state\":\"off\"}",
              "optimistic": true,
              "device": {{ device }}
            }
      # Config controls under the same device
      - service: mqtt.publish
        data:
          topic: "homeassistant/text/dash480_node/config"
          retain: true
          payload: >
            {
              "name": "Node Name",
              "object_id": "dash480_node",
              "unique_id": "dash480_node",
              "command_topic": "dash480/config/node/set",
              "state_topic":   "dash480/config/node/state",
              "device": {{ device }}
            }
      - service: mqtt.publish
        data:
          topic: "homeassistant/select/dash480_theme/config"
          retain: true
          payload: >
            {
              "name": "Theme",
              "object_id": "dash480_theme",
              "unique_id": "dash480_theme",
              "command_topic": "dash480/config/theme/set",
              "state_topic":   "dash480/config/theme/state",
              "options": ["dark","light"],
              "device": {{ device }}
            }
      - service: mqtt.publish
        data:
          topic: "homeassistant/number/dash480_pages/config"
          retain: true
          payload: >
            {
              "name": "Number of Pages",
              "object_id": "dash480_pages",
              "unique_id": "dash480_pages",
              "command_topic": "dash480/config/pages/set",
              "state_topic":   "dash480/config/pages/state",
              "min": 1,
              "max": 6,
              "step": 1,
              "device": {{ device }}
            }
      # 6 slots per page, up to 6 pages -> 36 text entities
      - repeat:
          count: 6
          sequence:
            - variables:
                page_idx: "{{ repeat.index }}"
            - repeat:
                count: 6
                sequence:
                  - variables:
                      slot_idx: "{{ repeat.index }}"
                  - service: mqtt.publish
                    data:
                      topic: "homeassistant/text/dash480_p{{ page_idx }}_s{{ slot_idx }}/config"
                      retain: true
                      payload: >
                        {
                          "name": "P{{ page_idx }} Slot {{ slot_idx }} Entity",
                          "object_id": "dash480_p{{ page_idx }}_s{{ slot_idx }}",
                          "unique_id": "dash480_p{{ page_idx }}_s{{ slot_idx }}",
                          "command_topic": "dash480/config/p{{ page_idx }}/s{{ slot_idx }}/set",
                          "state_topic":   "dash480/config/p{{ page_idx }}/s{{ slot_idx }}/state",
                          "device": {{ device }}
                        }
      # Publish current states (or defaults) for core config (retain)
      - service: mqtt.publish
        data:
          topic: dash480/config/node/state
          retain: true
          payload: "{{ node_state }}"
      - service: mqtt.publish
        data:
          topic: dash480/config/theme/state
          retain: true
          payload: "{{ theme_state }}"
      - service: mqtt.publish
        data:
          topic: dash480/config/pages/state
          retain: true
          payload: "{{ pages_state }}"

      # Build each device's UI dynamically based on capabilities
      - repeat:
          for_each: "{{ devices }}"
          sequence:
            - variables:
                dev: "{{ repeat.item }}"
                idx: "{{ repeat.index - 1 }}"
                base: "{{ (dev.page | int) * 1000 + (idx | int) * 10 }}"
                x: "{{ dev.x | default(48 + (idx % 3) * 160) }}"
                y: "{{ dev.y | default(96 + ((idx // 3) % 2) * 160) }}"
                label: "{{ dev.label | default(state_attr(dev.entity, 'friendly_name') | default(dev.entity)) }}"
            # Ensure page exists
            - service: mqtt.publish
              data: { topic: "hasp/{{ hasp_node }}/command/jsonl", payload: '{"page":{{ dev.page }},"id":0,"obj":"page"}' }
            # Tile background + label
            - service: mqtt.publish
              data: { topic: "hasp/{{ hasp_node }}/command/jsonl", payload: '{"page":{{ dev.page }},"obj":"obj","id":{{ base+1 }},"x":{{ x }},"y":{{ y }},"w":128,"h":120,"radius":14,"bg_color":"{{ color_tile }}"}' }
            - service: mqtt.publish
              data: { topic: "hasp/{{ hasp_node }}/command/jsonl", payload: '{"page":{{ dev.page }},"obj":"label","id":{{ base }},"x":{{ x+8 }},"y":{{ y+8 }},"w":112,"h":22,"text":"{{ label }}","text_font":18,"text_color":"{{ color_muted }}","bg_opa":0}' }
            # Device-specific controls
            - choose:
                # Switch: simple toggle button
                - conditions: "{{ dev.type == 'switch' }}"
                  sequence:
                    - service: mqtt.publish
                      data: { topic: "hasp/{{ hasp_node }}/command/jsonl", payload: '{"page":{{ dev.page }},"obj":"btn","id":{{ base+2 }},"x":{{ x+20 }},"y":{{ y+40 }},"w":88,"h":64,"text":"\\uE425","text_font":64,"toggle":true,"radius":12,"bg_color":"{{ color_btn_bg }}","text_color":"{{ color_btn_text }}","border_width":0}' }
                # Light: toggle + optional dimmer + color chips based on capabilities
                - conditions: "{{ dev.type == 'light' }}"
                  sequence:
                    - variables:
                        modes: "{{ state_attr(dev.entity, 'supported_color_modes') | default([]) }}"
                        has_brightness: "{{ 'brightness' in modes or 'brightness' in (modes | join(',') ) }}"
                        has_color: "{{ 'hs' in modes or 'rgb' in modes or 'rgbw' in modes or 'rgbww' in modes }}"
                    # Toggle
                    - service: mqtt.publish
                      data: { topic: "hasp/{{ hasp_node }}/command/jsonl", payload: '{"page":{{ dev.page }},"obj":"btn","id":{{ base+2 }},"x":{{ x+20 }},"y":{{ y+40 }},"w":88,"h":64,"text":"\\uE335","text_font":64,"toggle":true,"radius":12,"bg_color":"{{ color_btn_bg }}","text_color":"{{ color_btn_text }}","border_width":0}' }
                    # Brightness presets (if supported)
                    - choose:
                        - conditions: "{{ has_brightness }}"
                          sequence:
                            - service: mqtt.publish
                              data: { topic: "hasp/{{ hasp_node }}/command/jsonl", payload: '{"page":{{ dev.page }},"obj":"btnmatrix","id":{{ base+12 }},"x":{{ x }},"y":{{ y+110 }},"w":128,"h":36,"text_font":16,"options":["25%","50%","75%","100%"],"toggle":1,"one_check":1,"val":0,"radius":8}' }
                    # Color chips (if supported)
                    - choose:
                        - conditions: "{{ has_color }}"
                          sequence:
                            - service: mqtt.publish
                              data: { topic: "hasp/{{ hasp_node }}/command/jsonl", payload: '{"page":{{ dev.page }},"obj":"btn","id":{{ base+4 }},"x":{{ x+8 }},"y":{{ y+84 }},"w":24,"h":24,"radius":6,"bg_color":"#FF0000","bg_grad_dir":"none","border_width":0}' }
                            - service: mqtt.publish
                              data: { topic: "hasp/{{ hasp_node }}/command/jsonl", payload: '{"page":{{ dev.page }},"obj":"btn","id":{{ base+5 }},"x":{{ x+40 }},"y":{{ y+84 }},"w":24,"h":24,"radius":6,"bg_color":"#00FF00","bg_grad_dir":"none","border_width":0}' }
                            - service: mqtt.publish
                              data: { topic: "hasp/{{ hasp_node }}/command/jsonl", payload: '{"page":{{ dev.page }},"obj":"btn","id":{{ base+6 }},"x":{{ x+72 }},"y":{{ y+84 }},"w":24,"h":24,"radius":6,"bg_color":"#0000FF","bg_grad_dir":"none","border_width":0}' }
                            - service: mqtt.publish
                              data: { topic: "hasp/{{ hasp_node }}/command/jsonl", payload: '{"page":{{ dev.page }},"obj":"btn","id":{{ base+7 }},"x":{{ x+104 }},"y":{{ y+84 }},"w":24,"h":24,"radius":6,"bg_color":"#FDE68A","bg_grad_dir":"none","border_width":0}' }
                # Fan: preset modes or percentage btnmatrix
                - conditions: "{{ dev.type == 'fan' }}"
                  sequence:
                    - variables:
                        presets: "{{ state_attr(dev.entity, 'preset_modes') | default([]) }}"
                        has_presets: "{{ (presets | list | count) > 0 }}"
                        has_percentage: "{{ state_attr(dev.entity, 'percentage_step') is not none or state_attr(dev.entity, 'supported_features') | int(0) > 0 }}"
                    - choose:
                        - conditions: "{{ has_presets }}"
                          sequence:
                            - service: mqtt.publish
                              data:
                                topic: "hasp/{{ hasp_node }}/command/jsonl"
                                payload: >
                                  {"page":{{ dev.page }},"obj":"btnmatrix","id":{{ base+2 }},"x":{{ x }},"y":{{ y+46 }},"w":128,"h":64,"text_font":16,
                                   "options": {{ presets | tojson }}, "toggle":1, "one_check":1, "val":0, "radius":10 }
                        - conditions: "{{ not has_presets and has_percentage }}"
                          sequence:
                            - service: mqtt.publish
                              data: { topic: "hasp/{{ hasp_node }}/command/jsonl", payload: '{"page":{{ dev.page }},"obj":"btnmatrix","id":{{ base+2 }},"x":{{ x }},"y":{{ y+46 }},"w":128,"h":64,"text_font":16,"options":["Off","Low","Med","High"],"toggle":1,"one_check":1,"val":0,"radius":10}' }

      # --- Page 0: header + footer ---
      - variables:
          p0_lines:
            - '{"page":0,"id":0,"obj":"page"}'
            - '{"page":0,"id":10,"obj":"obj","x":0,"y":0,"w":480,"h":56,"bg_color":"{{ color_bg }}"}'
            - '{"page":0,"id":1,"obj":"label","x":12,"y":8,"w":120,"h":40,"text":"00:00","template":"%H:%M","text_font":24,"align":"left","text_color":"{{ color_text }}","bg_opa":0}'
            - '{"page":0,"id":2,"obj":"btn","x":140,"y":8,"w":200,"h":40,"text":"Home","text_font":22,"text_color":"{{ color_btn_text }}","bg_opa":0,"border_width":0,"radius":0,"outline_width":0,"shadow_width":0,"toggle":false}'
            - '{"page":0,"id":3,"obj":"btn","x":320,"y":8,"w":148,"h":40,"text":"--","text_font":24,"align":"right","text_color":"{{ color_text }}","bg_opa":0,"border_width":0,"radius":0,"outline_width":0,"shadow_width":0,"toggle":false}'
            - '{"page":0,"id":90,"obj":"btn","action":{"down": "page prev"},"x":0,"y":430,"w":120,"h":50,"bg_color":"#2C3E50","text":"\uE141","text_color":"#FFFFFF","radius":0,"border_side":0,"text_font":48}'
            - '{"page":0,"id":91,"obj":"btn","action":{"down": "page back"},"x":120,"y":430,"w":240,"h":50,"bg_color":"#2C3E50","text":"\uE2DC","text_color":"#FFFFFF","radius":0,"border_side":0,"text_font":48}'
            - '{"page":0,"id":92,"obj":"btn","action":{"down": "page next"},"x":340,"y":430,"w":120,"h":50,"bg_color":"#2C3E50","text":"\uE142","text_color":"#FFFFFF","radius":0,"border_side":0,"text_font":48}'
      - repeat:
          for_each: "{{ p0_lines }}"
          sequence:
            - service: mqtt.publish
              data: { topic: "hasp/{{ hasp_node }}/command/jsonl", payload: "{{ repeat.item }}" }

      - delay: "00:00:01"

      # Set initial header title and temp placeholder
      - service: mqtt.publish
        data: { topic: "hasp/{{ hasp_node }}/command/p0b2.text", payload: "Home" }

      - service: mqtt.publish
        data:
          topic: "hasp/{{ hasp_node }}/command/p0b3.text"
          payload: >
            {% set t = states('sensor.patio_humidity_temperature') %}
            {% if t not in ['unknown','unavailable','', None, 'none'] %}
            {{ '%0.1fÂ°'|format(t|float) }}
            {% else %}--{% endif %}

automation:
  # Build on device boot (for selected node)
  - id: panel_bootstrap_dynamic
    alias: Panel boot -> build dynamic UI
    mode: single
    trigger:
      - platform: mqtt
        topic: hasp/+/state/statusupdate
    variables:
      hasp_node: "{{ states('text.dash480_node') | default('plate') }}"
    condition: >
      {{ (trigger.payload_json.uptime | int(0)) < 15 and trigger.topic.split('/')[1] == hasp_node }}
    action:
      - service: script.panel_build_dynamic_ui

  # Rebuild UI when theme changes
  - id: panel_theme_change_rebuild
    alias: Panel theme change -> rebuild UI
    mode: restart
    trigger:
      - platform: state
        entity_id: select.dash480_theme
    action:
      - service: script.panel_build_dynamic_ui

  # Publish (or refresh) MQTT Discovery for the 3 relays
  - id: panel_mqtt_discovery_boot
    alias: Panel MQTT discovery (boot and node change)
    mode: single
    trigger:
      - platform: homeassistant
        event: start
      - platform: state
        entity_id: input_text.hasp_node
    action:
      - service: script.hasp_publish_discovery
        data:
          node: "{{ states('input_text.hasp_node') }}"
          relay1_name: "Relay 1"
          relay2_name: "Relay 2"
          relay3_name: "Relay 3"

  # Dynamic event router based on config
  - id: panel_event_router_dynamic
    alias: Panel MQTT -> HA actions (dynamic)
    mode: queued
    trigger:
      - platform: mqtt
        topic: hasp/+/state/#
    variables:
      hasp_node: "{{ states('text.dash480_node') | default('plate') }}"
      node: "{{ trigger.topic.split('/')[1] }}"
      id: "{{ trigger.topic.split('/')[-1] }}"
      event: "{{ trigger.payload_json.event|default('') }}"
      val: "{{ trigger.payload_json.val|default(-1)|int }}"
      # Same devices list as builder, built from MQTT-configured entities
      devices: >-
        {% set pages_count = [1,(states('number.dash480_pages')|int(1)),6] | sort | nth(1) %}
        {% set ns = namespace(list=[]) %}
        {% for p in range(1, (pages_count|int)+1) %}
          {% for s in range(1,7) %}
            {% set ent = states('text.dash480_p' ~ p ~ '_s' ~ s) %}
            {% if ent not in ['', 'unknown', 'unavailable', none] %}
              {% set dtype = ent.split('.')[0] %}
              {% if dtype in ['switch','light','fan'] %}
                {% set lbl = state_attr(ent, 'friendly_name') | default(ent) %}
                {% set ns.list = ns.list + [ { 'page': p, 'type': dtype, 'entity': ent, 'label': lbl } ] %}
              {% endif %}
            {% endif %}
          {% endfor %}
        {% endfor %}
        {% if (ns.list | count) == 0 %}
          {{ [
            { 'page': 1, 'type': 'switch', 'entity': 'switch.dash480_relay1', 'label': 'Relay 1' },
            { 'page': 1, 'type': 'switch', 'entity': 'switch.dash480_relay2', 'label': 'Relay 2' },
            { 'page': 1, 'type': 'switch', 'entity': 'switch.dash480_relay3', 'label': 'Relay 3' }
          ] }}
        {% else %}
          {{ ns.list }}
        {% endif %}
    condition: "{{ node == hasp_node }}"
    action:
      - choose:
          # Update header title from current page
          - conditions: "{{ trigger.topic.endswith('/state/page') }}"
            sequence:
              - variables:
                  title: >-
                    {% set p = trigger.payload|string %}
                    {% if p == '1' %}Home{% else %}Page {{p}}{% endif %}
              - service: mqtt.publish
                data:
                  topic: "hasp/{{ hasp_node }}/command/p0b2.text"
                  payload: "{{ title }}"

      - repeat:
          for_each: "{{ devices }}"
          sequence:
            - variables:
                dev: "{{ repeat.item }}"
                idx: "{{ repeat.index - 1 }}"
                base: "{{ (dev.page | int) * 1000 + (idx | int) * 10 }}"
                toggle_id: "p{{ dev.page }}b{{ base+2 }}"
                dim_id: "p{{ dev.page }}m{{ base+12 }}"
                color_r_id: "p{{ dev.page }}b{{ base+4 }}"
                color_g_id: "p{{ dev.page }}b{{ base+5 }}"
                color_b_id: "p{{ dev.page }}b{{ base+6 }}"
                color_w_id: "p{{ dev.page }}b{{ base+7 }}"
                fan_mat_id: "p{{ dev.page }}m{{ base+2 }}"
            - choose:
                # Switch toggle
                - conditions: "{{ dev.type == 'switch' and id == toggle_id and event == 'up' }}"
                  sequence:
                    - choose:
                        - conditions: "{{ val == 1 }}"
                          sequence:
                            - service: homeassistant.turn_on
                              target: { entity_id: "{{ dev.entity }}" }
                      default:
                        - service: homeassistant.turn_off
                          target: { entity_id: "{{ dev.entity }}" }
                # Light: toggle
                - conditions: "{{ dev.type == 'light' and id == toggle_id and event == 'up' }}"
                  sequence:
                    - choose:
                        - conditions: "{{ is_state(dev.entity, 'off') and val == 1 }}"
                          sequence:
                            - service: light.turn_on
                              target: { entity_id: "{{ dev.entity }}" }
                      default:
                        - service: light.turn_off
                          target: { entity_id: "{{ dev.entity }}" }
                # Light: brightness presets
                - conditions: "{{ dev.type == 'light' and id == dim_id and event in ['up','changed'] }}"
                  sequence:
                    - variables:
                        pct_map: { '0': 25, '1': 50, '2': 75, '3': 100 }
                        pct: "{{ pct_map[val|string] | default(100) }}"
                        bri: "{{ (pct | int * 255 / 100) | round(0) | int }}"
                    - service: light.turn_on
                      target: { entity_id: "{{ dev.entity }}" }
                      data: { brightness: "{{ bri }}" }
                # Light: color chips
                - conditions: "{{ dev.type == 'light' and id in [color_r_id, color_g_id, color_b_id, color_w_id] and event == 'up' }}"
                  sequence:
                    - variables:
                        rgb: >
                          {% if id == color_r_id %}[255,0,0]{% elif id == color_g_id %}[0,255,0]{% elif id == color_b_id %}[0,0,255]{% else %}[255,244,214]{% endif %}
                    - service: light.turn_on
                      target: { entity_id: "{{ dev.entity }}" }
                      data: { rgb_color: "{{ rgb }}" }
                # Fan: preset modes
                - conditions: "{{ dev.type == 'fan' and id == fan_mat_id and event in ['up','changed'] and (state_attr(dev.entity,'preset_modes') | default([]) | count) > 0 }}"
                  sequence:
                    - variables:
                        presets: "{{ state_attr(dev.entity, 'preset_modes') | default([]) }}"
                        mode: "{{ presets[val] if (val | int) < (presets | count) else presets[0] if (presets | count) > 0 else None }}"
                    - choose:
                        - conditions: "{{ mode is not none and mode | lower != 'off' }}"
                          sequence:
                            - service: fan.set_preset_mode
                              target: { entity_id: "{{ dev.entity }}" }
                              data: { preset_mode: "{{ mode }}" }
                      default:
                        - service: fan.turn_off
                          target: { entity_id: "{{ dev.entity }}" }
                # Fan: percentage matrix (Off/Low/Med/High)
                - conditions: "{{ dev.type == 'fan' and id == fan_mat_id and event in ['up','changed'] and (state_attr(dev.entity,'preset_modes') | default([]) | count) == 0 }}"
                  sequence:
                    - variables:
                        pct_map: { '0': 0, '1': 33, '2': 66, '3': 100 }
                        pct: "{{ pct_map[val|string] | default(0) | int }}"
                    - choose:
                        - conditions: "{{ pct == 0 }}"
                          sequence:
                            - service: fan.turn_off
                              target: { entity_id: "{{ dev.entity }}" }
                      default:
                        - service: fan.set_percentage
                          target: { entity_id: "{{ dev.entity }}" }
                          data: { percentage: "{{ pct }}" }
  # Publish discovery on HA start and when node name changes
  - id: panel_discovery_publish
    alias: Dash480 -> publish discovery (startup + node change)
    mode: single
    trigger:
      - platform: homeassistant
        event: start
      - platform: state
        entity_id: text.dash480_node
    action:
      - service: script.hasp_publish_discovery
      - delay: 1
      - service: script.panel_build_dynamic_ui

  # Rebuild when pages or slots change
  - id: panel_config_change_rebuild
    alias: Dash480 -> rebuild on config change
    mode: restart
    trigger:
      - platform: state
        entity_id:
          - number.dash480_pages
          - text.dash480_p1_s1
          - text.dash480_p1_s2
          - text.dash480_p1_s3
          - text.dash480_p1_s4
          - text.dash480_p1_s5
          - text.dash480_p1_s6
          - text.dash480_p2_s1
          - text.dash480_p2_s2
          - text.dash480_p2_s3
          - text.dash480_p2_s4
          - text.dash480_p2_s5
          - text.dash480_p2_s6
          - text.dash480_p3_s1
          - text.dash480_p3_s2
          - text.dash480_p3_s3
          - text.dash480_p3_s4
          - text.dash480_p3_s5
          - text.dash480_p3_s6
          - text.dash480_p4_s1
          - text.dash480_p4_s2
          - text.dash480_p4_s3
          - text.dash480_p4_s4
          - text.dash480_p4_s5
          - text.dash480_p4_s6
          - text.dash480_p5_s1
          - text.dash480_p5_s2
          - text.dash480_p5_s3
          - text.dash480_p5_s4
          - text.dash480_p5_s5
          - text.dash480_p5_s6
          - text.dash480_p6_s1
          - text.dash480_p6_s2
          - text.dash480_p6_s3
          - text.dash480_p6_s4
          - text.dash480_p6_s5
          - text.dash480_p6_s6
    action:
      - service: script.panel_build_dynamic_ui
